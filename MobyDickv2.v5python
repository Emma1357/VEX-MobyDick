{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_drive_smart = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nright_drive_smart = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\ndrivetrain_inertial = Inertial(Ports.PORT3)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 40, MM, 1)\npotentiometer_A = Potentiometer(brain.three_wire_port.a)\nfork_motor_group_motor_a = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nfork_motor_group_motor_b = Motor(Ports.PORT9, GearSetting.RATIO_18_1, True)\nfork_motor_group = MotorGroup(fork_motor_group_motor_a, fork_motor_group_motor_b)\nbumper_fork = Bumper(brain.three_wire_port.b)\ncontroller_1 = Controller(PRIMARY)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_1_left_shoulder_control_motors_stopped = True\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, controller_1_left_shoulder_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis1\n            # right = axis3 - axis1\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis1.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis1.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonL1/buttonL2 status\n            # to control fork_motor_group\n            if controller_1.buttonL1.pressing():\n                fork_motor_group.spin(FORWARD)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif controller_1.buttonL2.pressing():\n                fork_motor_group.spin(REVERSE)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif not controller_1_left_shoulder_control_motors_stopped:\n                fork_motor_group.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_left_shoulder_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       Emma Wilkerson\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\nmyVariable = 0\ncompetition = Competition(driver_control, autonomous)\ndef autonomous():\n    global myVariable\n    # For starting position A\n    fork_motor_group.spin(FORWARD)\n    if potentiometer_A.angle(PERCENT) == 36:\n        fork_motor_group.stop()\n    wait(0.5, SECONDS)\n    drivetrain.turn_to_rotation(17, DEGREES, wait=True)\n    wait(1, SECONDS)\n    while True:\n        if bumper_fork.pressing():\n            drivetrain.stop()\n            break\n        else:\n            drivetrain.drive(FORWARD)\n        wait(5, MSEC)\n    while True:\n        if potentiometer_A.angle(PERCENT) == 47:\n            fork_motor_group.stop()\n            break\n        else:\n            fork_motor_group.spin(REVERSE)\n        wait(5, MSEC)\n    drivetrain.drive_for(REVERSE, 1127, MM, wait=True)\n    drivetrain.turn_to_rotation(45, DEGREES, wait=True)\n    drivetrain.drive_for(FORWARD, 200, MM, wait=True)\n    while True:\n        if potentiometer_A.angle(PERCENT) == 36:\n            fork_motor_group.stop()\n            break\n        else:\n            fork_motor_group.spin(FORWARD)\n        wait(5, MSEC)\n    drivetrain.drive_for(REVERSE, 300, MM, wait=True)\n    wait(1, SECONDS)\n    drivetrain.turn_to_rotation(110, DEGREES, wait=True)\n    wait(1, SECONDS)\n    drivetrain.drive_for(FORWARD, 500, MM, wait=True)\n    while True:\n        if potentiometer_A.angle(PERCENT) == 47:\n            fork_motor_group.stop()\n            break\n        else:\n            fork_motor_group.spin(REVERSE)\n        wait(5, MSEC)\n    wait(1, SECONDS)\n    drivetrain.drive_for(FORWARD, 200, MM, wait=True)\n    wait(1, SECONDS)\n    drivetrain.turn_to_rotation(90, DEGREES, wait=True)\n    wait(1, SECONDS)\n    drivetrain.drive_for(FORWARD, 800, MM, wait=True)\n    fork_motor_group.stop()\n    drivetrain.stop()\ndef E_Stop_System():\n    global myVariable, why, message1, Battery_Low, Battery_50_Percent, Battery_10_Percent\n    while True:\n        if controller_1.buttonX.pressing():\n            fork_motor_group.stop()\n            drivetrain.stop()\n            wait(5, MSEC)  \ndef driver_control():\n    pass\n\n   \n\n   \n","textLanguage":"python","rconfig":[{"port":[1,10,3],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[1],"name":"potentiometer_A","customName":true,"deviceType":"Potentiometer","deviceClass":"pot","setting":{},"triportSourcePort":22},{"port":[2,9],"name":"fork_motor_group","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[2],"name":"bumper_fork","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"fork_motor_group","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20211013.15.00.00","appVersion":"2.2.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}